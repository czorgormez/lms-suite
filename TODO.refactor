########################################################################
Primary goals of the re-factor
########################################################################

Separate out hardware specific hooks and graphical specific hooks
from the main LMS7 support library. LMS7 support should be as
minimalistic as possible to appeal to the widest user-base.

########################################################################
Re-factor thoughts and TODO list
########################################################################

Leave lms7suite/ alone as a reference.
This directory will be gradually filled in from lms7suite/
with new library files, algorithms, various chip support,
a WX GUI support library, and possible GUI application,

The GUI application itself should be part of a hardware project
which glues together LMS7 driver, drivers for other on-board chips,
and the WX GUI support library for the evaluation software.

New directory structure:

* There will be a main library for the LMS7 driver
  that looks much like the current controlLogic directory.
  This library will provide an entry point for instantiating
  the driver object to control the LMS7,
  shared calibration algorithms which can be used
  in a stand-alone fashion to store calibration tables,
  and support for other chips that accompany official eval products.

* The C bindings will provide a C interface based on the LMS7002M-driver project.
  These bindings will share the calibration algorithms found in the main library.

* A separate directory will provide the graphical support library.
  It will compile against the LMS7 driver library in C++,
  and export several functions to invoke the GUI.

Outside of this directory structure:

* To support specific hardware (STREAM board for example).
  Another directory will incorporate the STREAM specific FPGA project,
  firmware, and any hardware-specific glue needed to run
  the LMS7 evaluation app using the GUI library.

* In addition, the STREAM board will provide a Soapy SDR
  example/demonstration project to show how the LMS7 driver
  can be integrated into a simple control + stream wrapper
  to be used with a vast ecosystem of SDR software.

########################################################################
Phase I of the refactor
########################################################################

In this first phase of the refactor, the primary goal is to get
the separate libraries and apps compiling in a new build system.
Hardware specific interfaces will be removed from the main library.
Only the LMS7 is focused on in this phase. Later when the pattern
is worked out, LMS6 will be refactored in a similar way.

TODO list:

* lms7 library compiling without hardware specific interfaces
  * and without GUI dependency (replace wx yield with function pointer)
* lms7 gui compiling against lms7 library and public headers
* top level app that uses the new gui and library with evb7

########################################################################
Phase II of the refactor
########################################################################

In this phase of the refactor, the primary focus is to
implement a better connection abstraction for hardware designers.
The current design is based around decoding and state machine
logic found in the STREAM board and EVB7 micro-controller.
The new interface will focus on using raw spi and GPIO access.
The adaptation between this new interface and the state machine
interface will go into the application glue layer.

TODO list:

* Refactor the connection interface for generic SPI access
* Move state-machine adaptor into application/glue layer

########################################################################
Phase III of the refactor
########################################################################

Integrate the LMS7002M C driver into the project:
https://github.com/myriadrf/LMS7002M-driver

In addition, we want to be able to share one set of
self-calibration and tuning algorithms.
This may mean some refactoring of the algorithms.cpp
to make the interface more generic/reusable.

TODO list:

* Integrate lms7 C bindings into this project
* C bindings using shared calibration algorithms
  * Some refactor for algorithms.cpp for reusability.

########################################################################
Phase IV of the refactor
########################################################################

TODO list:

* same work as above, but for lms6

########################################################################
Some finishing touches
########################################################################

Might do this a long the way, this is just a list to not forget about it...

* Create debian/ control directory
* Install package config file
* Install cmake config file
